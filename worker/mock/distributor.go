// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HyperGAI/serving-agent/worker (interfaces: TaskDistributor)

// Package mockwk is a generated GoMock package.
package mockwk

import (
	context "context"
	reflect "reflect"

	worker "github.com/HyperGAI/serving-agent/worker"
	asynq "github.com/hibiken/asynq"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskDistributor is a mock of TaskDistributor interface.
type MockTaskDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDistributorMockRecorder
}

// MockTaskDistributorMockRecorder is the mock recorder for MockTaskDistributor.
type MockTaskDistributorMockRecorder struct {
	mock *MockTaskDistributor
}

// NewMockTaskDistributor creates a new mock instance.
func NewMockTaskDistributor(ctrl *gomock.Controller) *MockTaskDistributor {
	mock := &MockTaskDistributor{ctrl: ctrl}
	mock.recorder = &MockTaskDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDistributor) EXPECT() *MockTaskDistributorMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockTaskDistributor) DeleteTask(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskDistributorMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskDistributor)(nil).DeleteTask), arg0, arg1)
}

// DistributeTaskRunPrediction mocks base method.
func (m *MockTaskDistributor) DistributeTaskRunPrediction(arg0 context.Context, arg1 *worker.PayloadRunPrediction, arg2 ...asynq.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DistributeTaskRunPrediction", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributeTaskRunPrediction indicates an expected call of DistributeTaskRunPrediction.
func (mr *MockTaskDistributorMockRecorder) DistributeTaskRunPrediction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributeTaskRunPrediction", reflect.TypeOf((*MockTaskDistributor)(nil).DistributeTaskRunPrediction), varargs...)
}

// GetTaskQueueInfo mocks base method.
func (m *MockTaskDistributor) GetTaskQueueInfo(arg0 string) (*asynq.QueueInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskQueueInfo", arg0)
	ret0, _ := ret[0].(*asynq.QueueInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskQueueInfo indicates an expected call of GetTaskQueueInfo.
func (mr *MockTaskDistributorMockRecorder) GetTaskQueueInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskQueueInfo", reflect.TypeOf((*MockTaskDistributor)(nil).GetTaskQueueInfo), arg0)
}

// ListActiveTasks mocks base method.
func (m *MockTaskDistributor) ListActiveTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveTasks indicates an expected call of ListActiveTasks.
func (mr *MockTaskDistributorMockRecorder) ListActiveTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListActiveTasks), arg0)
}

// ListArchivedTasks mocks base method.
func (m *MockTaskDistributor) ListArchivedTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArchivedTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArchivedTasks indicates an expected call of ListArchivedTasks.
func (mr *MockTaskDistributorMockRecorder) ListArchivedTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArchivedTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListArchivedTasks), arg0)
}

// ListPendingTasks mocks base method.
func (m *MockTaskDistributor) ListPendingTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingTasks indicates an expected call of ListPendingTasks.
func (mr *MockTaskDistributorMockRecorder) ListPendingTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListPendingTasks), arg0)
}

// ListRetryTasks mocks base method.
func (m *MockTaskDistributor) ListRetryTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRetryTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRetryTasks indicates an expected call of ListRetryTasks.
func (mr *MockTaskDistributorMockRecorder) ListRetryTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRetryTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListRetryTasks), arg0)
}

// ListScheduledTasks mocks base method.
func (m *MockTaskDistributor) ListScheduledTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScheduledTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduledTasks indicates an expected call of ListScheduledTasks.
func (mr *MockTaskDistributorMockRecorder) ListScheduledTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduledTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListScheduledTasks), arg0)
}

// ListUnfinishedTasks mocks base method.
func (m *MockTaskDistributor) ListUnfinishedTasks(arg0 string) ([]*asynq.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnfinishedTasks", arg0)
	ret0, _ := ret[0].([]*asynq.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnfinishedTasks indicates an expected call of ListUnfinishedTasks.
func (mr *MockTaskDistributorMockRecorder) ListUnfinishedTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnfinishedTasks", reflect.TypeOf((*MockTaskDistributor)(nil).ListUnfinishedTasks), arg0)
}

// PauseQueue mocks base method.
func (m *MockTaskDistributor) PauseQueue(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseQueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseQueue indicates an expected call of PauseQueue.
func (mr *MockTaskDistributorMockRecorder) PauseQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseQueue", reflect.TypeOf((*MockTaskDistributor)(nil).PauseQueue), arg0)
}

// UnpauseQueue mocks base method.
func (m *MockTaskDistributor) UnpauseQueue(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseQueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseQueue indicates an expected call of UnpauseQueue.
func (mr *MockTaskDistributorMockRecorder) UnpauseQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseQueue", reflect.TypeOf((*MockTaskDistributor)(nil).UnpauseQueue), arg0)
}
