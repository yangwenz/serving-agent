// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/HyperGAI/serving-agent/platform (interfaces: Webhook,Fetcher)

// Package mockplatform is a generated GoMock package.
package mockplatform

import (
	http "net/http"
	reflect "reflect"
	time "time"

	platform "github.com/HyperGAI/serving-agent/platform"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhook is a mock of Webhook interface.
type MockWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMockRecorder
}

// MockWebhookMockRecorder is the mock recorder for MockWebhook.
type MockWebhookMockRecorder struct {
	mock *MockWebhook
}

// NewMockWebhook creates a new mock instance.
func NewMockWebhook(ctrl *gomock.Controller) *MockWebhook {
	mock := &MockWebhook{ctrl: ctrl}
	mock.recorder = &MockWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhook) EXPECT() *MockWebhookMockRecorder {
	return m.recorder
}

// CreateNewTask mocks base method.
func (m *MockWebhook) CreateNewTask(arg0, arg1, arg2, arg3 string, arg4 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTask", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewTask indicates an expected call of CreateNewTask.
func (mr *MockWebhookMockRecorder) CreateNewTask(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTask", reflect.TypeOf((*MockWebhook)(nil).CreateNewTask), arg0, arg1, arg2, arg3, arg4)
}

// GetTaskIDByModelStatus mocks base method.
func (m *MockWebhook) GetTaskIDByModelStatus(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskIDByModelStatus", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskIDByModelStatus indicates an expected call of GetTaskIDByModelStatus.
func (mr *MockWebhookMockRecorder) GetTaskIDByModelStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskIDByModelStatus", reflect.TypeOf((*MockWebhook)(nil).GetTaskIDByModelStatus), arg0, arg1)
}

// GetTaskInfo mocks base method.
func (m *MockWebhook) GetTaskInfo(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskInfo", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskInfo indicates an expected call of GetTaskInfo.
func (mr *MockWebhookMockRecorder) GetTaskInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskInfo", reflect.TypeOf((*MockWebhook)(nil).GetTaskInfo), arg0)
}

// GetTaskInfoObject mocks base method.
func (m *MockWebhook) GetTaskInfoObject(arg0 string) (*platform.TaskInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskInfoObject", arg0)
	ret0, _ := ret[0].(*platform.TaskInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskInfoObject indicates an expected call of GetTaskInfoObject.
func (mr *MockWebhookMockRecorder) GetTaskInfoObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskInfoObject", reflect.TypeOf((*MockWebhook)(nil).GetTaskInfoObject), arg0)
}

// UpdateTaskInfo mocks base method.
func (m *MockWebhook) UpdateTaskInfo(arg0 *platform.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskInfo indicates an expected call of UpdateTaskInfo.
func (mr *MockWebhookMockRecorder) UpdateTaskInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskInfo", reflect.TypeOf((*MockWebhook)(nil).UpdateTaskInfo), arg0)
}

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// SendRequest mocks base method.
func (m *MockFetcher) SendRequest(arg0 *http.Request, arg1 time.Duration, arg2 int) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MockFetcherMockRecorder) SendRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*MockFetcher)(nil).SendRequest), arg0, arg1, arg2)
}
